"""
  Implementation of the "docs" rule. The implementation runs Dgeni with the
  specified entry points and outputs the API docs into a package relative directory.
"""

load("@build_bazel_rules_nodejs//internal/providers:npm_package_info.bzl", "NpmPackageInfo", "node_modules_aspect")
load("@build_bazel_rules_nodejs//internal/providers:declaration_info.bzl", "DeclarationInfo")
load("@npm//@bazel/typescript/internal:common/compilation.bzl", "DEPS_ASPECTS")

DocumentationInfo = provider(
    doc = "Provides sources for docs",
    fields = {
        "output_path": "Output directory",
        "name": "Name of the doc",
        "docs": "Name of the doc",
        "list": "Json formatted doc list",
    },
)

def _docs(ctx):
    doc_name = ctx.label.name

    if ctx.attr.doc_name:
        doc_name = ctx.attr.doc_name

    doc_label_directory = ctx.label.package

    doc_output_directory = "%s/%s/%s" % (ctx.bin_dir.path, doc_label_directory, doc_name)

    # sources will be available in building context.
    sources = depset()

    # module mappings of deps
    mappings = dict()

    for dep in ctx.attr.deps:
        if NpmPackageInfo in dep:
            # Dependencies from node_module should appear in execroot.
            node_module = dep[NpmPackageInfo]
            sources = depset(transitive = [sources, node_module.sources])
        if DeclarationInfo in dep:
            # We need to pass all transitive deps as well to let typescript resolve everything.
            sources = depset(transitive = [sources, dep[DeclarationInfo].transitive_declarations])
        if hasattr(dep, "es6_module_mappings"):
            # We need to pass mappings to paths of dgeni
            mappings.update(dep.es6_module_mappings)

    # Make source files available in execution
    sources = depset(transitive = [sources, depset(ctx.files.srcs)])

    # Doc list of this target that created by dgeni.
    doc_list = ctx.actions.declare_file("%s/%s" % (doc_name, "doc-list.json"))

    # Doc files that must be  generated by this rule.
    expected_docs = [doc_list]

    # Expected symbols
    expected_symbols = []

    for src in ctx.files.srcs:
        if not ctx.attr.exports and src.basename.endswith(".ts"):
            fail("You have to specify exports, if you have typescript files.")
        elif src.basename.endswith(".md"):
            name = src.basename.replace(src.basename[-3:], "")
            expected_docs.append(ctx.actions.declare_file("%s/%s.html" % (doc_name, name)))
            expected_symbols.append(name)

    for symbol in ctx.attr.exports:
        expected_docs.append(ctx.actions.declare_file("%s/%s.html" % (doc_name, symbol)))
        expected_symbols.append(symbol)

    data = []

    for doc in ctx.attr.data:
        doc = doc[DocumentationInfo]
        expected_docs.append(ctx.actions.declare_directory("%s/%s" % (doc_name, doc.name)))
        data.append(struct(name = doc.name, list = doc.list.short_path, output_path = doc.output_path))

        # Make docs available in execution context
        sources = depset([doc.list], transitive = [sources, doc.docs])

    args = ctx.actions.args()
    args.add(ctx.label.package.split("/")[-1])
    args.add(doc_output_directory)
    args.add_joined(ctx.files.srcs, join_with = ",", omit_if_empty = False)
    args.add_joined(expected_symbols, join_with = ",", omit_if_empty = False)
    args.add(mappings)
    args.add(ctx.bin_dir.path)
    args.add(struct(data = data).to_json())

    ctx.actions.run(
        inputs = ctx.files._dgeni_templates + sources.to_list(),
        tools = sources,
        executable = ctx.executable._dgeni_bin,
        outputs = expected_docs,
        arguments = [args],
        progress_message = "Docs %s (%s)" % (doc_label_directory, ctx.attr.name),
    )

    generated_docs = depset(expected_docs)

    return [
        DefaultInfo(files = generated_docs),
        DocumentationInfo(
            name = doc_name,
            docs = generated_docs,
            output_path = "%s/%s" % (doc_label_directory, doc_name),
            list = doc_list,
        ),
    ]

"""
  Rule definition for the "docs" rule that can generate API documentation
  for specified packages and their entry points.
"""
docs = rule(
    implementation = _docs,
    attrs = {
        "doc_name": attr.string(
            doc = "Name of the documentation",
        ),
        "data": attr.label_list(
            default = [],
            allow_files = True,
            doc = "Other doc targets to bundle",
        ),
        "exports": attr.string_list(
            doc = "Expected doc files to be built in this target",
        ),
        "srcs": attr.label_list(
            doc = "The TypeScript and Markdown files to compile.",
            allow_files = [".ts", ".md"],
        ),
        "deps": attr.label_list(
            aspects = DEPS_ASPECTS + [node_modules_aspect],
            doc = "Compile-time dependencies, typically other ts_library targets",
        ),
        "_dgeni_templates": attr.label(
            default = Label("//tools/dgeni/templates"),
        ),
        "_dgeni_bin": attr.label(
            default = Label("//tools/dgeni"),
            executable = True,
            cfg = "host",
        ),
    },
)
